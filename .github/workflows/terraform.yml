name: Terraform Deployment

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.8

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ap-northeast-2
          
      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -out=tfplan > plan_output.txt
          if grep -q "No changes. Infrastructure is up-to-date." plan_output.txt; then
            echo "No changes detected. Skipping deployment."
            exit 0
          fi

      - name: Terraform Apply
        if: steps.plan.outcome == 'success'
        run: terraform apply -auto-approve tfplan

      # Terraform 배포 후 출력값 추출
      - name: Extract Terraform Outputs
        id: tf_outputs
        run: terraform output -json > tf_outputs.json

      # 아티팩트로 Terraform 출력값 업로드 (스캔 단계에서 사용하기 위해)
      - name: Upload Terraform Outputs
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs
          path: tf_outputs.json

      # Terraform destroy 실행 (배포 성공 여부와 상관없이 항상 실행)
      - name: Cleanup on Failure
        if: failure()
        run: terraform destroy -auto-approve

          
          